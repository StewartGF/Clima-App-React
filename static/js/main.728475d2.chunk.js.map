{"version":3,"sources":["components/Header.js","components/Clima.js","components/Landing.js","components/Loading.js","App.js","serviceWorker.js","index.js"],"names":["Header","datosBusqueda","useState","ciudad","pais","search","setSearch","handleChange","evento","target","name","value","className","href","onSubmit","preventDefault","required","type","placeholder","aria-label","onChange","hidden","Clima","informacion","main","weather","parseInt","temp_max","temp_min","temp","Landing","mensaje","loop","Infinity","wrapper","steps","Loading","alt","src","style","width","height","App","componente","setInformacion","setCiudad","setPais","landing","setLanding","loading","setLoading","useEffect","a","url","fetch","respuesta","json","data","consultaAPI","cod","datos","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.728475d2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function Header({ datosBusqueda }) {\r\n  //search es el state para realizar la consulta en la API\r\n  const [search, setSearch] = useState({\r\n    ciudad: \"\",\r\n    pais: \"\"\r\n  });\r\n\r\n  //maneja el evento para la b√∫squeda\r\n  const handleChange = evento => {\r\n    setSearch({\r\n      ...search, //spread notation para guardar el valor anterior\r\n      [evento.target.name]: evento.target.value\r\n    });\r\n  };\r\n\r\n  const consultaClima = evento => {\r\n    evento.preventDefault();\r\n    //env√≠o los datos de busqueda al App component, para realizar la busqueda por la API\r\n    datosBusqueda(search);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-light bg-light d-flex justify-content-center\">\r\n        <a href=\"/Clima-App-React/\" className=\"navbar-brand  \">\r\n          <i className=\"fas fa-temperature-high fa-lg\"></i>\r\n        </a>\r\n\r\n        <form className=\"form-inline\" onSubmit={consultaClima}>\r\n          <input\r\n            required\r\n            className=\"form-control mr-sm-2 input-lg glowing-border\"\r\n            type=\"search\"\r\n            placeholder=\"Ciudad\"\r\n            aria-label=\"Search\"\r\n            name=\"ciudad\"\r\n            onChange={handleChange}\r\n          />\r\n          <select\r\n            className=\"form-control mr-sm-2 input-lg glowing-border\"\r\n            name=\"pais\"\r\n            required\r\n            onChange={handleChange}\r\n          >\r\n            <option hidden value=\"\">\r\n              Selecciona un pa√≠s\r\n            </option>\r\n            <option value=\"CL\">Chile</option>\r\n            <option value=\"AR\">Argentina</option>\r\n            <option value=\"MX\">M√©xico</option>\r\n            <option value=\"US\">Estados Unidos</option>\r\n            <option value=\"ES\">Espa√±a</option>\r\n          </select>\r\n          <button\r\n            className=\"btn  my-2 my-sm-0 input-lg botonBuscar hovered\"\r\n            type=\"submit\"\r\n          >\r\n            Buscar\r\n          </button>\r\n        </form>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Clima({ informacion }) {\r\n  //Saco la informacion relevante desde \"informacion\"\r\n  const { name, main, weather } = informacion;\r\n\r\n  //Convierto la info en Celsius\r\n  const kelvin = 273.15;\r\n  if (!name) return null;\r\n\r\n  return (\r\n    <div className=\"centered-content\">\r\n      <div className=\"container-clima row\">\r\n        <div className=\"LeftContent col-md-8 \">\r\n          <h1>{name}</h1>\r\n          <p className=\"tempText\">Temperatura m√°xima</p>\r\n          <p className=\"tempValue\"> {parseInt(main.temp_max - kelvin, 10)} ¬∞</p>\r\n          <p className=\"tempText\">Temperatura m√≠nima</p>\r\n          <p className=\"tempValue\"> {parseInt(main.temp_min - kelvin, 10)} ¬∞</p>\r\n        </div>\r\n        <div className=\"RightContent col-md-4 \">\r\n          <h1>{parseInt(main.temp - kelvin, 10)} ¬∞</h1>\r\n          <hr></hr>\r\n          <p>Temperatura Actual</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Typical from \"react-typical\";\r\n\r\nexport default function Landing({ mensaje }) {\r\n  return (\r\n    <div className=\"centered-contentLanding animated bounce\">\r\n      <div className=\"container-clima \">\r\n        <div className=\"mensajeLanding\">\r\n          <p>{mensaje}</p>\r\n        </div>\r\n        <div className=\"react-typical\">\r\n          <p>\r\n            Puedes buscar el clima en {\"\"}\r\n            <Typical\r\n              loop={Infinity}\r\n              wrapper=\"b\"\r\n              steps={[\r\n                \"Santiago - Chile üìå \",\r\n                1000,\r\n                \"Canc√∫n - M√©xico üö¢ \",\r\n                1000,\r\n                \"Madrid - Espa√±a üåé \",\r\n                1000,\r\n                \"Miami - Estados Unidosüöñ \",\r\n                1000,\r\n                \"Mendoza - Argentina üö† \",\r\n                1000,\r\n                \"Acapulco - M√©xico üö§ \",\r\n                1000,\r\n                \"Chicago - Estados Unidos üöî \",\r\n                1000,\r\n                \"Seattle - Estados Unidos üåÖ \",\r\n                1000\r\n              ]}\r\n            />\r\n          </p>\r\n        </div>\r\n        <p className=\"bottomText\">Y muchos m√°s üòÅ !</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Loading() {\r\n  return (\r\n    <div className=\"loading\">\r\n      <div className=\"centered-content\">\r\n        <div className=\"container-clima row\">\r\n          <div>\r\n            <p>Cargando...</p>\r\n          </div>\r\n          <img\r\n            alt=\"cargando\"\r\n            src=\"imagenes/DoubleRing.svg\"\r\n            style={{ width: \"30%\", height: \"30%\" }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Clima from \"./components/Clima\";\nimport Landing from \"./components/Landing\";\nimport Loading from \"./components/Loading\";\n\nfunction App() {\n  const [informacion, setInformacion] = useState({});\n  const [ciudad, setCiudad] = useState(\"\");\n  const [pais, setPais] = useState(\"\");\n  const [landing, setLanding] = useState(true);\n  const [loading, setLoading] = useState(false);\n\n  //hook que reemplaza al componentDidMount y el didUpdate\n  useEffect(() => {\n    if (ciudad === \"\") return;\n    setLoading(true);\n    const consultaAPI = async () => {\n      const APIKey = \"fc8bee85b1a5306e5862da9a91f95dfc\";\n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${APIKey}`;\n      const respuesta = await fetch(url);\n      const data = await respuesta.json();\n      setInformacion(data);\n      setLoading(false);\n    };\n\n    consultaAPI();\n  }, [ciudad, pais]);\n\n  const datosBusqueda = datos => {\n    if (datos.ciudad === \"\" || datos.pais === \"\") {\n      setLanding(true);\n      return;\n    }\n    //seteo el State de este componente con la informacion que viene del header\n    setCiudad(datos.ciudad);\n    setPais(datos.pais);\n    setLanding(false);\n  };\n\n  let componente;\n  if (landing) {\n    componente = <Landing mensaje=\"Bienvenido! ‚úå\"></Landing>;\n  } else if (informacion.cod === \"404\") {\n    componente = (\n      <Landing mensaje=\"El lugar que est√°s buscando no existe\"></Landing>\n    );\n  } else {\n    componente = <Clima informacion={informacion}></Clima>;\n  }\n\n  return (\n    <>\n      <div className=\"divHeader\">\n        <Header datosBusqueda={datosBusqueda}></Header>\n      </div>\n      {loading && <Loading></Loading>}\n      {!loading && <div className=\"divContainer\">{componente}</div>}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}